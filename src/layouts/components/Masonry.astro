---
// Masonry Component that takes in a list of components and renders them in a masonry layout

interface Props {
  columns: number;
  gap: number;
  Renderer: (data: any) => any;
  data: {
    [key: string]: any;
  }[];
}

const { columns, gap, Renderer, data } = Astro.props;

const listColumns = new Array(columns).fill(0);

data.forEach((item) => {
  let sizeScore = 0;
  // Add 1 for each image link
  const content: string =
    item.project.data.description + item.project.data.title;
  sizeScore += (
    JSON.stringify(item.project.data).match(
      /https?:\/\/[^ ]+\.(jpg|png|gif)/g,
    ) || []
  ).length;
  // Add 1 for every 100 characters of text
  sizeScore += Math.ceil(content.length / 100);
  item.sizeScore = sizeScore;
  console.log(item.project.data.title, sizeScore);
});

// Sort items by size score
data.sort((a, b) => b.sizeScore - a.sizeScore);

// Get similar height columns
const columnHeights = listColumns.map(() => 0);
data.forEach((item) => {
  const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
  columnHeights[shortestColumnIndex] += item.sizeScore;
  item.columnIndex = shortestColumnIndex;
});
---

<div class={`grid md:grid-cols-2 sm:grid-cols-1 gap-${gap} items-start`}>
  {
    listColumns.map((value, index) => (
      <div class={`grid gap-${gap}`}>
        {data
          .filter((_, i) => data[i].columnIndex === index)
          .map((value) => (
            <div class="max-w-full h-min overflow-hidden">
              <Renderer {...value} />
            </div>
          ))}
      </div>
    ))
  }
</div>
